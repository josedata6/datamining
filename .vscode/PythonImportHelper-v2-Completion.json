[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "SimpleImputer",
        "importPath": "sklearn.impute",
        "description": "sklearn.impute",
        "isExtraImport": true,
        "detail": "sklearn.impute",
        "documentation": {}
    },
    {
        "label": "KNNImputer",
        "importPath": "sklearn.impute",
        "description": "sklearn.impute",
        "isExtraImport": true,
        "detail": "sklearn.impute",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "LinearRegression",
        "importPath": "sklearn.linear_model",
        "description": "sklearn.linear_model",
        "isExtraImport": true,
        "detail": "sklearn.linear_model",
        "documentation": {}
    },
    {
        "label": "r2_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "mean_squared_error",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "PolynomialFeatures",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "SequentialFeatureSelector",
        "importPath": "sklearn.feature_selection",
        "description": "sklearn.feature_selection",
        "isExtraImport": true,
        "detail": "sklearn.feature_selection",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "inputation-example",
        "description": "inputation-example",
        "peekOfCode": "data = {\"Feature 1\": [1, 2, 3, 4], \"Feature 2\": [2, 3, np.nan, 5]}\ndf = pd.DataFrame(data)\n# Apply Mean Imputation\nimputer = SimpleImputer(strategy=\"mean\")  # Using mean to fill missing values\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after Mean Imputation:\")\nprint(df_imputed)",
        "detail": "inputation-example",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "inputation-example",
        "description": "inputation-example",
        "peekOfCode": "df = pd.DataFrame(data)\n# Apply Mean Imputation\nimputer = SimpleImputer(strategy=\"mean\")  # Using mean to fill missing values\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after Mean Imputation:\")\nprint(df_imputed)",
        "detail": "inputation-example",
        "documentation": {}
    },
    {
        "label": "imputer",
        "kind": 5,
        "importPath": "inputation-example",
        "description": "inputation-example",
        "peekOfCode": "imputer = SimpleImputer(strategy=\"mean\")  # Using mean to fill missing values\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after Mean Imputation:\")\nprint(df_imputed)",
        "detail": "inputation-example",
        "documentation": {}
    },
    {
        "label": "df_imputed",
        "kind": 5,
        "importPath": "inputation-example",
        "description": "inputation-example",
        "peekOfCode": "df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after Mean Imputation:\")\nprint(df_imputed)",
        "detail": "inputation-example",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "k-nearest-n",
        "description": "k-nearest-n",
        "peekOfCode": "data = {\"Feature 1\": [1, 2, 3, 4], \"Feature 2\": [2, 3, np.nan, 5]}\ndf = pd.DataFrame(data)\n# Apply KNN Imputer\nimputer = KNNImputer(n_neighbors=2)  # Using 2 nearest neighbors for imputation\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after KNN Imputation:\")\nprint(df_imputed)",
        "detail": "k-nearest-n",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "k-nearest-n",
        "description": "k-nearest-n",
        "peekOfCode": "df = pd.DataFrame(data)\n# Apply KNN Imputer\nimputer = KNNImputer(n_neighbors=2)  # Using 2 nearest neighbors for imputation\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after KNN Imputation:\")\nprint(df_imputed)",
        "detail": "k-nearest-n",
        "documentation": {}
    },
    {
        "label": "imputer",
        "kind": 5,
        "importPath": "k-nearest-n",
        "description": "k-nearest-n",
        "peekOfCode": "imputer = KNNImputer(n_neighbors=2)  # Using 2 nearest neighbors for imputation\ndf_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after KNN Imputation:\")\nprint(df_imputed)",
        "detail": "k-nearest-n",
        "documentation": {}
    },
    {
        "label": "df_imputed",
        "kind": 5,
        "importPath": "k-nearest-n",
        "description": "k-nearest-n",
        "peekOfCode": "df_imputed = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)\n# Print before and after imputation\nprint(\"Original DataFrame:\")\nprint(df)\nprint(\"\\nDataFrame after KNN Imputation:\")\nprint(df_imputed)",
        "detail": "k-nearest-n",
        "documentation": {}
    },
    {
        "label": "n_samples",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "n_samples = 100\nX1 = np.random.uniform(1000, 3000, n_samples)  # Predictor 1: e.g., square footage\nX2 = np.random.uniform(1, 5, n_samples)       # Predictor 2: e.g., number of bedrooms\nX = np.column_stack((X1, X2))                 # Combine into a 2D array\n# True relationship: y = 50000 + 100*X1 + 20000*X2 + noise\ny = 50000 + 100 * X1 + 20000 * X2 + np.random.normal(0, 10000, n_samples)\n# Step 2: Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# 80% train (80 samples), 20% test (20 samples)\n# Step 3: Fit the Multiple Linear Regression model on training data",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "X1",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "X1 = np.random.uniform(1000, 3000, n_samples)  # Predictor 1: e.g., square footage\nX2 = np.random.uniform(1, 5, n_samples)       # Predictor 2: e.g., number of bedrooms\nX = np.column_stack((X1, X2))                 # Combine into a 2D array\n# True relationship: y = 50000 + 100*X1 + 20000*X2 + noise\ny = 50000 + 100 * X1 + 20000 * X2 + np.random.normal(0, 10000, n_samples)\n# Step 2: Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# 80% train (80 samples), 20% test (20 samples)\n# Step 3: Fit the Multiple Linear Regression model on training data\nmodel = LinearRegression()",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "X2",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "X2 = np.random.uniform(1, 5, n_samples)       # Predictor 2: e.g., number of bedrooms\nX = np.column_stack((X1, X2))                 # Combine into a 2D array\n# True relationship: y = 50000 + 100*X1 + 20000*X2 + noise\ny = 50000 + 100 * X1 + 20000 * X2 + np.random.normal(0, 10000, n_samples)\n# Step 2: Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# 80% train (80 samples), 20% test (20 samples)\n# Step 3: Fit the Multiple Linear Regression model on training data\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "X = np.column_stack((X1, X2))                 # Combine into a 2D array\n# True relationship: y = 50000 + 100*X1 + 20000*X2 + noise\ny = 50000 + 100 * X1 + 20000 * X2 + np.random.normal(0, 10000, n_samples)\n# Step 2: Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# 80% train (80 samples), 20% test (20 samples)\n# Step 3: Fit the Multiple Linear Regression model on training data\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Step 4: Make predictions",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "y = 50000 + 100 * X1 + 20000 * X2 + np.random.normal(0, 10000, n_samples)\n# Step 2: Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# 80% train (80 samples), 20% test (20 samples)\n# Step 3: Fit the Multiple Linear Regression model on training data\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n# Step 4: Make predictions\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "model = LinearRegression()\nmodel.fit(X_train, y_train)\n# Step 4: Make predictions\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\n# Step 5: Evaluate the model\nr2_train = r2_score(y_train, y_train_pred)\nr2_test = r2_score(y_test, y_test_pred)\n# Step 6: Print results\nprint(\"Model Coefficients:\")",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "y_train_pred",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "y_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\n# Step 5: Evaluate the model\nr2_train = r2_score(y_train, y_train_pred)\nr2_test = r2_score(y_test, y_test_pred)\n# Step 6: Print results\nprint(\"Model Coefficients:\")\nprint(f\"Intercept: {model.intercept_:.2f}\")\nprint(f\"Coefficient for X1: {model.coef_[0]:.2f}\")\nprint(f\"Coefficient for X2: {model.coef_[1]:.2f}\")",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "y_test_pred",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "y_test_pred = model.predict(X_test)\n# Step 5: Evaluate the model\nr2_train = r2_score(y_train, y_train_pred)\nr2_test = r2_score(y_test, y_test_pred)\n# Step 6: Print results\nprint(\"Model Coefficients:\")\nprint(f\"Intercept: {model.intercept_:.2f}\")\nprint(f\"Coefficient for X1: {model.coef_[0]:.2f}\")\nprint(f\"Coefficient for X2: {model.coef_[1]:.2f}\")\nprint(f\"R-squared (Training): {r2_train:.4f}\")",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "r2_train",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "r2_train = r2_score(y_train, y_train_pred)\nr2_test = r2_score(y_test, y_test_pred)\n# Step 6: Print results\nprint(\"Model Coefficients:\")\nprint(f\"Intercept: {model.intercept_:.2f}\")\nprint(f\"Coefficient for X1: {model.coef_[0]:.2f}\")\nprint(f\"Coefficient for X2: {model.coef_[1]:.2f}\")\nprint(f\"R-squared (Training): {r2_train:.4f}\")\nprint(f\"R-squared (Testing): {r2_test:.4f}\")",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "r2_test",
        "kind": 5,
        "importPath": "multiple-linear-regression",
        "description": "multiple-linear-regression",
        "peekOfCode": "r2_test = r2_score(y_test, y_test_pred)\n# Step 6: Print results\nprint(\"Model Coefficients:\")\nprint(f\"Intercept: {model.intercept_:.2f}\")\nprint(f\"Coefficient for X1: {model.coef_[0]:.2f}\")\nprint(f\"Coefficient for X2: {model.coef_[1]:.2f}\")\nprint(f\"R-squared (Training): {r2_train:.4f}\")\nprint(f\"R-squared (Testing): {r2_test:.4f}\")",
        "detail": "multiple-linear-regression",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "over-under-fitting",
        "description": "over-under-fitting",
        "peekOfCode": "X = np.linspace(-3, 3, 50).reshape(-1, 1)\ny = X**3 - 3*X + np.random.randn(50, 1) * 3 #random noise\n# Split Data into Train & Test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Train and Plot Models with Different Degrees\nplt.figure(figsize=(12, 5))\ndegrees = [1, 3, 10]  # Linear, Cubic, Overfitting\ntitles = [\"Underfitting (Linear)\", \"Good Fit (Cubic)\", \"Overfitting (Degree=10)\"]\nfor i, degree in enumerate(degrees): #\n    poly = PolynomialFeatures(degree=degree) ",
        "detail": "over-under-fitting",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "over-under-fitting",
        "description": "over-under-fitting",
        "peekOfCode": "y = X**3 - 3*X + np.random.randn(50, 1) * 3 #random noise\n# Split Data into Train & Test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n# Train and Plot Models with Different Degrees\nplt.figure(figsize=(12, 5))\ndegrees = [1, 3, 10]  # Linear, Cubic, Overfitting\ntitles = [\"Underfitting (Linear)\", \"Good Fit (Cubic)\", \"Overfitting (Degree=10)\"]\nfor i, degree in enumerate(degrees): #\n    poly = PolynomialFeatures(degree=degree) \n    X_train_poly = poly.fit_transform(X_train) ",
        "detail": "over-under-fitting",
        "documentation": {}
    },
    {
        "label": "degrees",
        "kind": 5,
        "importPath": "over-under-fitting",
        "description": "over-under-fitting",
        "peekOfCode": "degrees = [1, 3, 10]  # Linear, Cubic, Overfitting\ntitles = [\"Underfitting (Linear)\", \"Good Fit (Cubic)\", \"Overfitting (Degree=10)\"]\nfor i, degree in enumerate(degrees): #\n    poly = PolynomialFeatures(degree=degree) \n    X_train_poly = poly.fit_transform(X_train) \n    X_test_poly = poly.transform(X_test)\n    model = LinearRegression().fit(X_train_poly, y_train)\n    y_pred = model.predict(X_test_poly)\n    mse = mean_squared_error(y_test, y_pred)\n    # Plot Results",
        "detail": "over-under-fitting",
        "documentation": {}
    },
    {
        "label": "titles",
        "kind": 5,
        "importPath": "over-under-fitting",
        "description": "over-under-fitting",
        "peekOfCode": "titles = [\"Underfitting (Linear)\", \"Good Fit (Cubic)\", \"Overfitting (Degree=10)\"]\nfor i, degree in enumerate(degrees): #\n    poly = PolynomialFeatures(degree=degree) \n    X_train_poly = poly.fit_transform(X_train) \n    X_test_poly = poly.transform(X_test)\n    model = LinearRegression().fit(X_train_poly, y_train)\n    y_pred = model.predict(X_test_poly)\n    mse = mean_squared_error(y_test, y_pred)\n    # Plot Results\n    plt.subplot(1, 3, i+1)",
        "detail": "over-under-fitting",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "X = np.random.rand(100, 5)  # 100 samples, 5 features\ny = 3 * X[:, 0] + 2 * X[:, 1] - 1.5 * X[:, 2] + np.random.randn(100)\n# Target variable with noise\ndf = pd.DataFrame(X, columns=[f'Feature_{i}' for i in range(1, 6)]) \ndf['Target'] = y\n# Split Data into Training and Testing Sets\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns=[\"Target\"]), df[\"Target\"], test_size=0.2, random_state=42)\n# Initialize Model\nmodel = LinearRegression()\n# Forward Feature Selection (Adding Features Step by Step)",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "y = 3 * X[:, 0] + 2 * X[:, 1] - 1.5 * X[:, 2] + np.random.randn(100)\n# Target variable with noise\ndf = pd.DataFrame(X, columns=[f'Feature_{i}' for i in range(1, 6)]) \ndf['Target'] = y\n# Split Data into Training and Testing Sets\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns=[\"Target\"]), df[\"Target\"], test_size=0.2, random_state=42)\n# Initialize Model\nmodel = LinearRegression()\n# Forward Feature Selection (Adding Features Step by Step)\nforward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"forward\", cv=5)",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "df = pd.DataFrame(X, columns=[f'Feature_{i}' for i in range(1, 6)]) \ndf['Target'] = y\n# Split Data into Training and Testing Sets\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns=[\"Target\"]), df[\"Target\"], test_size=0.2, random_state=42)\n# Initialize Model\nmodel = LinearRegression()\n# Forward Feature Selection (Adding Features Step by Step)\nforward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"forward\", cv=5)\nforward_selector.fit(X_train, y_train)\nselected_forward = X_train.columns[forward_selector.get_support()]",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "df['Target']",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "df['Target'] = y\n# Split Data into Training and Testing Sets\nX_train, X_test, y_train, y_test = train_test_split(df.drop(columns=[\"Target\"]), df[\"Target\"], test_size=0.2, random_state=42)\n# Initialize Model\nmodel = LinearRegression()\n# Forward Feature Selection (Adding Features Step by Step)\nforward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"forward\", cv=5)\nforward_selector.fit(X_train, y_train)\nselected_forward = X_train.columns[forward_selector.get_support()]\nprint(f\"Selected Features (Forward): {list(selected_forward)}\")",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "model = LinearRegression()\n# Forward Feature Selection (Adding Features Step by Step)\nforward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"forward\", cv=5)\nforward_selector.fit(X_train, y_train)\nselected_forward = X_train.columns[forward_selector.get_support()]\nprint(f\"Selected Features (Forward): {list(selected_forward)}\")\n# Backward Feature Selection (Removing Features Step by Step)\nbackward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"backward\", cv=5)\nbackward_selector.fit(X_train, y_train)\nselected_backward = X_train.columns[backward_selector.get_support()]",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "forward_selector",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "forward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"forward\", cv=5)\nforward_selector.fit(X_train, y_train)\nselected_forward = X_train.columns[forward_selector.get_support()]\nprint(f\"Selected Features (Forward): {list(selected_forward)}\")\n# Backward Feature Selection (Removing Features Step by Step)\nbackward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"backward\", cv=5)\nbackward_selector.fit(X_train, y_train)\nselected_backward = X_train.columns[backward_selector.get_support()]\nprint(f\"Selected Features (Backward): {list(selected_backward)}\")\n# Train and Evaluate Models",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "selected_forward",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "selected_forward = X_train.columns[forward_selector.get_support()]\nprint(f\"Selected Features (Forward): {list(selected_forward)}\")\n# Backward Feature Selection (Removing Features Step by Step)\nbackward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"backward\", cv=5)\nbackward_selector.fit(X_train, y_train)\nselected_backward = X_train.columns[backward_selector.get_support()]\nprint(f\"Selected Features (Backward): {list(selected_backward)}\")\n# Train and Evaluate Models\nX_train_forward, X_test_forward = X_train[selected_forward], X_test[selected_forward]\nX_train_backward, X_test_backward = X_train[selected_backward], X_test[selected_backward]",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "backward_selector",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "backward_selector = SequentialFeatureSelector(model, n_features_to_select=\"auto\", direction=\"backward\", cv=5)\nbackward_selector.fit(X_train, y_train)\nselected_backward = X_train.columns[backward_selector.get_support()]\nprint(f\"Selected Features (Backward): {list(selected_backward)}\")\n# Train and Evaluate Models\nX_train_forward, X_test_forward = X_train[selected_forward], X_test[selected_forward]\nX_train_backward, X_test_backward = X_train[selected_backward], X_test[selected_backward]\n# Train forward selection model\nmodel.fit(X_train_forward, y_train)\ny_pred_forward = model.predict(X_test_forward)",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "selected_backward",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "selected_backward = X_train.columns[backward_selector.get_support()]\nprint(f\"Selected Features (Backward): {list(selected_backward)}\")\n# Train and Evaluate Models\nX_train_forward, X_test_forward = X_train[selected_forward], X_test[selected_forward]\nX_train_backward, X_test_backward = X_train[selected_backward], X_test[selected_backward]\n# Train forward selection model\nmodel.fit(X_train_forward, y_train)\ny_pred_forward = model.predict(X_test_forward)\nmse_forward = mean_squared_error(y_test, y_pred_forward)\n# Train backward selection model",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "y_pred_forward",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "y_pred_forward = model.predict(X_test_forward)\nmse_forward = mean_squared_error(y_test, y_pred_forward)\n# Train backward selection model\nmodel.fit(X_train_backward, y_train)\ny_pred_backward = model.predict(X_test_backward)\nmse_backward = mean_squared_error(y_test, y_pred_backward)\nprint(f\"Forward Selection MSE: {mse_forward:.4f}\")\nprint(f\"Backward Selection MSE: {mse_backward:.4f}\")",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "mse_forward",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "mse_forward = mean_squared_error(y_test, y_pred_forward)\n# Train backward selection model\nmodel.fit(X_train_backward, y_train)\ny_pred_backward = model.predict(X_test_backward)\nmse_backward = mean_squared_error(y_test, y_pred_backward)\nprint(f\"Forward Selection MSE: {mse_forward:.4f}\")\nprint(f\"Backward Selection MSE: {mse_backward:.4f}\")",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "y_pred_backward",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "y_pred_backward = model.predict(X_test_backward)\nmse_backward = mean_squared_error(y_test, y_pred_backward)\nprint(f\"Forward Selection MSE: {mse_forward:.4f}\")\nprint(f\"Backward Selection MSE: {mse_backward:.4f}\")",
        "detail": "variable-section",
        "documentation": {}
    },
    {
        "label": "mse_backward",
        "kind": 5,
        "importPath": "variable-section",
        "description": "variable-section",
        "peekOfCode": "mse_backward = mean_squared_error(y_test, y_pred_backward)\nprint(f\"Forward Selection MSE: {mse_forward:.4f}\")\nprint(f\"Backward Selection MSE: {mse_backward:.4f}\")",
        "detail": "variable-section",
        "documentation": {}
    }
]